Prisma schema migrate command.
npx prisma migrate dev --name add_product

npx prisma studio // open the tables

================================================================================
Product - Category Relationship Types in Prisma Schema
================================================================================

1. One-to-One (1:1) - 1 product belongs to 1 category, 1 category has 1 product
--------------------------------------------------------------------------------
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String   @unique
}

model Category {
  id       String   @id @default(cuid())
  name     String
  slug     String   @unique
  product  Product? // Optional because not every category may have a product
}

Note: The @unique constraint on categoryId ensures one-to-one relationship.


2. One-to-Many (1:N) - 1 category can have multiple products, 1 product belongs to 1 category
--------------------------------------------------------------------------------
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
}

model Category {
  id       String    @id @default(cuid())
  name     String
  slug     String    @unique
  products Product[] // Array because one category can have many products
}

Note: This is the current schema setup. Foreign key on Product side (categoryId).


3. Many-to-Many (N:N) - 1 product can belong to multiple categories, 1 category can have multiple products
--------------------------------------------------------------------------------
Option A: Implicit Many-to-Many (Prisma handles join table automatically)
model Product {
  id          String     @id @default(cuid())
  name        String
  description String?
  categories  Category[] // Array because one product can have many categories
}

model Category {
  id       String    @id @default(cuid())
  name     String
  slug     String    @unique
  products Product[] // Array because one category can have many products
}


Option B: Explicit Many-to-Many (with custom join table for additional fields)
model Product {
  id          String            @id @default(cuid())
  name        String
  description String?
  categories  ProductCategory[] // Relation through join table
}

model Category {
  id       String            @id @default(cuid())
  name     String
  slug     String            @unique
  products ProductCategory[] // Relation through join table
}

model ProductCategory {
  id         String   @id @default(cuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  createdAt  DateTime @default(now())
  
  @@unique([productId, categoryId]) // Ensures no duplicate relationships
}

Note: Use Option A for simple many-to-many. Use Option B if you need to store additional
      data about the relationship (like createdAt, quantity, etc.)


// Create Seeding script
// Run typescript directly without changing to JS = Package name is TSX
npm install -D tsx


================================================================================
Creating Records with Relationships (Using Prisma Connect)
================================================================================

When creating a Product that has a relationship with Category, you need to use Prisma's
`connect` method to link to an existing category.

Example from seed.ts:
await prisma.product.create({
  data: {
    ...product,
    category: {
      connect: { id: product.category },
    },
  },
});

Explanation:
------------
1. `...product` - Spreads all product properties (name, description, price, etc.)
                 Note: product.category here is a string (category ID), not a relation object

2. `category: { connect: { id: product.category } }` - Overrides the category field
   - Uses Prisma's `connect` method to link to an existing Category
   - `connect` tells Prisma to find a Category with the matching ID and create the relationship
   - This is the explicit way to create relationships when you know the related record exists

Why use `connect`?
------------------
- Your Product type might have `category: string` (the category ID)
- But Prisma expects `category` to be a relation object, not a string
- `connect` explicitly tells Prisma to link to an existing record by ID

Alternative approaches:
-----------------------
Option 1: Direct categoryId assignment (simpler)
await prisma.product.create({
  data: {
    ...product,
    categoryId: product.category, // Direct assignment of foreign key
  },
});

Option 2: Using connect (more explicit about relationships - recommended)
await prisma.product.create({
  data: {
    ...product,
    category: {
      connect: { id: product.category },
    },
  },
});

The `connect` approach is more explicit and makes it clear that you're creating a relationship
to an existing record. Use `create` if you want to create both the Product and Category in one
operation, or `connectOrCreate` if the Category might or might not exist.



**Dynamic Rendering
With Dynamic Rendering, routes are rendered at request time. This happens when your route uses request-specific information like cookies, headers, or search params.

A route becomes dynamic when it uses any of these APIs:

cookies
headers
connection
draftMode
searchParams prop
unstable_noStore
fetch with { cache: 'no-store' }
Dynamic routes are not cached in the Full Route Cache, but can still use the Data Cache for data requests.